/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.awt.Color;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.Community;
import model.Encounter;
import model.EncounterHistory;
import model.House;
import model.Patient;
import model.PatientDirectory;
import model.PersonDirectory;

/**
 *
 * @author NetrA
 */
public class AbnormalJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AbnormalJPanel
     */
    PatientDirectory pDirectory;
    City city;
    public AbnormalJPanel(PatientDirectory pDirectory,City city) {
        initComponents();
        this.pDirectory = pDirectory;
        this.city=city;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnPR = new javax.swing.JButton();
        btnBP = new javax.swing.JButton();
        btnBT = new javax.swing.JButton();
        btnR = new javax.swing.JButton();
        txtComm = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAbnormal = new javax.swing.JTable();
        lblCount = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setText("Abnormality Report");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 50, -1, -1));

        jLabel2.setForeground(new java.awt.Color(0, 102, 102));
        jLabel2.setText("Community:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 140, -1, -1));

        jLabel3.setForeground(new java.awt.Color(0, 102, 102));
        jLabel3.setText("View Abnormality for: ");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 130, -1, 30));

        btnPR.setForeground(new java.awt.Color(0, 102, 102));
        btnPR.setText("Pulse Rate");
        btnPR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPRActionPerformed(evt);
            }
        });
        add(btnPR, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 130, -1, -1));

        btnBP.setForeground(new java.awt.Color(0, 102, 102));
        btnBP.setText("Blood Pressure");
        btnBP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBPActionPerformed(evt);
            }
        });
        add(btnBP, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 130, -1, -1));

        btnBT.setForeground(new java.awt.Color(0, 102, 102));
        btnBT.setText("Temperature");
        btnBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBTActionPerformed(evt);
            }
        });
        add(btnBT, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 130, -1, -1));

        btnR.setForeground(new java.awt.Color(0, 102, 102));
        btnR.setText("Respiration");
        btnR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRActionPerformed(evt);
            }
        });
        add(btnR, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 130, -1, -1));

        txtComm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCommActionPerformed(evt);
            }
        });
        txtComm.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCommKeyReleased(evt);
            }
        });
        add(txtComm, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 130, 110, 30));

        tblAbnormal.setForeground(new java.awt.Color(0, 102, 102));
        tblAbnormal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Patient Name", "Patient ID"
            }
        ));
        jScrollPane1.setViewportView(tblAbnormal);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 270, 710, 100));

        lblCount.setForeground(new java.awt.Color(0, 204, 204));
        lblCount.setText(" ");
        add(lblCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 410, 540, 20));
    }// </editor-fold>//GEN-END:initComponents

    
    private void addObjectToRow(Patient p)
    {
          DefaultTableModel model = (DefaultTableModel)tblAbnormal.getModel();
      model.setRowCount(0);
      
         Object[] object={
                    
            p.getName(),
            p.getPatientID(),
//            r.getVitalSigns().getBp(),
//            r.getVitalSigns().getBt(),
//            r.getVitalSigns().getHeartRate(),
//            r.getVitalSigns().getRespiratoryRate()
            
};
                 model.addRow(object); 
    }
    
    private void btnBPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBPActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)tblAbnormal.getModel();
      model.setRowCount(0);
        String community = txtComm.getText();
         Integer count=0;
      for(int i=0; i<pDirectory.getpatientDirectory().size(); i++){
            Patient patient=pDirectory.getpatientDirectory().get(i);
            EncounterHistory eh=new EncounterHistory();
            eh=patient.getEncounterHistory();
            //TODO: AND patient belongs to given community
            for(Encounter r: eh.getEncounterHistory()){
                //System.out.println("out vitalabnoraml");
                  patient.setIsBPAbnormal(r.isVitalSignAbNormalBP(r));
            }
            if(patient.getIsBPAbnormal()){
           
      
         Object[] object={
                    
            patient.getName(),
            patient.getPatientID(),
//            r.getVitalSigns().getBp(),
//            r.getVitalSigns().getBt(),
//            r.getVitalSigns().getHeartRate(),
//            r.getVitalSigns().getRespiratoryRate()
            
};
                 model.addRow(object); 
             count+=1;
            }
             lblCount.setText("Number of People with BLOOD PRESSURE abnormalities are "+count+"");
            }
        
  
    }//GEN-LAST:event_btnBPActionPerformed

    private void txtCommActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCommActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCommActionPerformed

    private void btnBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBTActionPerformed
         DefaultTableModel model = (DefaultTableModel)tblAbnormal.getModel();
      model.setRowCount(0);
      
       String community = txtComm.getText();
         Integer count=0;
      for(int i=0; i<pDirectory.getpatientDirectory().size(); i++){
            Patient patient=pDirectory.getpatientDirectory().get(i);
            EncounterHistory eh=new EncounterHistory();
            eh=patient.getEncounterHistory();
            //TODO: AND patient belongs to given community
            for(Encounter r: eh.getEncounterHistory()){
               // System.out.println("out vitalabnoraml");
                  patient.setIsBTAbnormal(r.isVitalSignAbNormalBT(r));
            }
            if(patient.getIsBTAbnormal()){
           
      
         Object[] object={
                    
            patient.getName(),
            patient.getPatientID(),
//            r.getVitalSigns().getBp(),
//            r.getVitalSigns().getBt(),
//            r.getVitalSigns().getHeartRate(),
//            r.getVitalSigns().getRespiratoryRate()
            
};
                 model.addRow(object); 
             count+=1;
            }
             lblCount.setText("Number of People with BODY TEMPERATURE abnormalities are "+count+"");
            }
            
    }//GEN-LAST:event_btnBTActionPerformed

    private void btnRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRActionPerformed
       DefaultTableModel model = (DefaultTableModel)tblAbnormal.getModel();
      model.setRowCount(0);
      
       String community = txtComm.getText();
         Integer count=0;
      for(int i=0; i<pDirectory.getpatientDirectory().size(); i++){
            Patient patient=pDirectory.getpatientDirectory().get(i);
            EncounterHistory eh=new EncounterHistory();
            eh=patient.getEncounterHistory();
            //TODO: AND patient belongs to given community
            for(Encounter r: eh.getEncounterHistory()){
                System.out.println("out vitalabnoraml");
                  patient.setIsRespirationAbnormal(r.isVitalSignAbNormalRespiration(r));
            }
            if(patient.getIsRespirationAbnormal()){
           
      
         Object[] object={
                    
            patient.getName(),
            patient.getPatientID(),
//            r.getVitalSigns().getBp(),
//            r.getVitalSigns().getBt(),
//            r.getVitalSigns().getHeartRate(),
//            r.getVitalSigns().getRespiratoryRate()
            
};
                 model.addRow(object); 
             count+=1;
            }
             lblCount.setText("Number of People with RESPIRATION abnormalities are "+count+"");
            }
    }//GEN-LAST:event_btnRActionPerformed

    private void btnPRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPRActionPerformed
          DefaultTableModel model = (DefaultTableModel)tblAbnormal.getModel();
      model.setRowCount(0);
      
       String community = txtComm.getText();
         Integer count=0;
      for(int i=0; i<pDirectory.getpatientDirectory().size(); i++){
            Patient patient=pDirectory.getpatientDirectory().get(i);
            EncounterHistory eh=new EncounterHistory();
            eh=patient.getEncounterHistory();
            //TODO: AND patient belongs to given community
            for(Encounter r: eh.getEncounterHistory()){
                System.out.println("out vitalabnoraml");
                  patient.setIsPulseAbnormal(r.isVitalSignAbNormalPulse(r));
            }
            if(patient.getIsPulseAbnormal()){
           
      
         Object[] object={
                    
            patient.getName(),
            patient.getPatientID(),
//            r.getVitalSigns().getBp(),
//            r.getVitalSigns().getBt(),
//            r.getVitalSigns().getHeartRate(),
//            r.getVitalSigns().getRespiratoryRate()
            
};
                 model.addRow(object); 
             count+=1;
            }
             lblCount.setText("Number of People with PULSE RATE abnormalities are "+count+"");
            }
    }//GEN-LAST:event_btnPRActionPerformed

    private void txtCommKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCommKeyReleased
        // TODO add your handling code here:
//        String PATTERN="^[a-zA-Z]{5,9}$";
//       Pattern patt=Pattern.compile(PATTERN);
//       Matcher match=patt.matcher(txtComm.getText());
//       if(!match.matches()){
//       txtComm.setBackground(Color.red);
//       }
//       
//       
//       if((txtComm.getText()).isEmpty()){
//           txtComm.setBackground(Color.red);
//       }
    }//GEN-LAST:event_txtCommKeyReleased

      
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBP;
    private javax.swing.JButton btnBT;
    private javax.swing.JButton btnPR;
    private javax.swing.JButton btnR;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCount;
    private javax.swing.JTable tblAbnormal;
    private javax.swing.JTextField txtComm;
    // End of variables declaration//GEN-END:variables

}

